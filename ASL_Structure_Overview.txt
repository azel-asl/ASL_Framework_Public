/* ===========================================================
ASL™ Language Structure Overview — v3.2
© 2025 Erwin Layaoen | AZEL™ Studio — Patent Pending
=========================================================== */

     ┌───────────────────────────────────────────────┐
     │             AGENTIC SPEC LOOP (ASL)           │
     └───────────────────────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 1. IDEA CAPTURE           │  → Define the user's intent or goal.
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 2. STRUCTURE MAPPING       │  → Match the intent to a modular framework.
          │                             │    (e.g., narrative, workflow, image, data)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 3. GENERATE                │  → AI and/or human agent expands structured output.
          │                             │    (text, visuals, logic, or hybrid)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 4. VALIDATE                │  → Verify reasoning, tone, and consistency.
          │                             │    (psychological, logical, or stylistic)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 5. REFINE                  │  → Iterate, simplify, or elevate quality.
          │                             │    (loop until precision and clarity achieved)
          └────────────────────────────┘

─────────────────────────────────────────────────────────────
STRUCTURAL SUMMARY
─────────────────────────────────────────────────────────────

Every ASL Framework (e.g., ASL_Inspired, ASL_SkinTexture, ASL_StoryKit)
inherits this 5-stage reasoning loop.

Each loop instance is expressed through **ASL_Core_Syntax™** blocks:

  ::META        → defines framework identity, version, license
  ::INPUT       → collects key variables or user prompts
  ::AGENT       → defines specialized reasoning or generation agents
  ::FLOW        → establishes agent execution order (e.g., RUN analyze -> craft)
  ::OUTPUT      → renders interpolated or final structured result
  ::ASL_CHECKSUM → logs and validates integrity

─────────────────────────────────────────────────────────────
ENGINE RELATIONSHIP
─────────────────────────────────────────────────────────────

**ASL_Core_Syntax™**
- Defines grammar, logic structure, and directive format.
- Ensures interoperability between frameworks.
- Provides validation, clarity, and modular reusability.

**ASL_HYPER™ Engine**
- Executes ASL Core Syntax files.
- Manages data flow, variable interpolation, and output formatting.
- Logs reasoning steps and performance metrics (for private builds).

─────────────────────────────────────────────────────────────
USAGE MODEL
─────────────────────────────────────────────────────────────

1. User provides natural input (intent, idea, tone, etc.)
2. ASL_Core_Syntax™ parses structure and activates agents.
3. Agents collaborate via defined ::FLOW sequence.
4. ASL_HYPER™ executes reasoning chain, merges outputs.
5. ::OUTPUT block returns final human-readable or machine-parseable result.

─────────────────────────────────────────────────────────────
NOTES
─────────────────────────────────────────────────────────────

- ASL emphasizes **traceable creativity** — every reasoning step can be logged, audited, and refined.
- Frameworks can be applied to both **creative** and **technical** systems.
- Syntax is language-agnostic and designed for AI safety, clarity, and modular scalability.
