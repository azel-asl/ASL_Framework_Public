/* ===========================================================
ASL™ Language Structure Overview — v3.2 (Formal Grammar Edition)
© 2025 Erwin Layaoen | AZEL™ Studio — Patent Pending
=========================================================== */

     ┌───────────────────────────────────────────────┐
     │             AGENTIC SPEC LOOP (ASL)           │
     └───────────────────────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 1. IDEA CAPTURE           │  → Define the user's intent or goal.
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 2. STRUCTURE MAPPING       │  → Map the intent to a framework archetype.
          │                             │    (e.g., narrative, logic chain, workflow)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 3. GENERATE                │  → Agents produce structured reasoning output.
          │                             │    (text, visuals, or hybrid)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 4. VALIDATE                │  → Verify tone, accuracy, and context.
          │                             │    (auditable reasoning and checksum)
          └────────────────────────────┘
                         │
                         ▼
          ┌────────────────────────────┐
          │ 5. REFINE                  │  → Iterate or elevate quality.
          │                             │    (loop until precision achieved)
          └────────────────────────────┘

─────────────────────────────────────────────────────────────
STRUCTURAL SUMMARY
─────────────────────────────────────────────────────────────

Every ASL Framework (e.g., ASL_StoryKit, ASL_SkinTexture, ASL_Inspired)
inherits this 5-stage reasoning loop.

Each instance of the loop is expressed through **ASL_Core_Syntax™** blocks:

  ::META          → Defines identity, author, version, and license
  ::INPUT         → Captures variables, prompts, or parameters
  ::AGENT         → Defines a reasoning role or AI task block
  ::FLOW          → Establishes execution chain (e.g., RUN analyze → craft)
  ::OUTPUT        → Defines rendered or final structured result
  ::ASL_CHECKSUM  → Validates execution trace and integrity
  ::PLUGIN        → Integrates external modules or APIs
  ::CONNECT       → Links additional ASL frameworks or agents
  ::DEFINE        → Declares reusable constants or functions
  ::ASL_STARTUP   → Initializes runtime context before flow execution

─────────────────────────────────────────────────────────────
ENGINE RELATIONSHIP
─────────────────────────────────────────────────────────────

**ASL_Core_Syntax™**
- Defines the language grammar (see `asl.ebnf`)
- Enforces structural integrity, validation, and auditability
- Enables human-readable orchestration for multi-agent systems

**ASL_HYPER™ Engine**
- Executes ASL_Core_Syntax™ programs
- Handles data flow, variable substitution, and context memory
- Logs execution steps for reproducibility and audit
- Compatible with ChatGPT, Claude, Gemini, Mistral, and local LLMs

─────────────────────────────────────────────────────────────
EXECUTION MODEL (v3.2 Runtime Flow)
─────────────────────────────────────────────────────────────

1. **Parse** — Lexer + Parser tokenize blocks and build AST
2. **Validate** — Runtime verifies structure and checksum
3. **Initialize** — Load plugins, variables, context memory
4. **Execute** — Agents run sequentially or concurrently per ::FLOW
5. **Output** — Final ::OUTPUT block returns structured results
6. **Terminate** — SHA-256 checksum logged for audit

─────────────────────────────────────────────────────────────
PHILOSOPHY
─────────────────────────────────────────────────────────────

- ASL transforms **human reasoning into executable structure**
- Designed for **non-coders** yet formally defined for AI validation
- Enables **traceable creativity** — each output can be inspected, verified, and refined
- Functions as the missing **language layer** between LLM reasoning and software logic
- Frameworks remain **language-agnostic**, ensuring safe, modular, auditable AI systems

─────────────────────────────────────────────────────────────
END OF DOCUMENT
─────────────────────────────────────────────────────────────
